//var trainingPoint = ee.FeatureCollection('ft:1dqAd2OLYUNbj3ogdV71bqHqi4_aieiTFI30Yos_g');
//var train = [irrigated,rainfed,otehrlulc,water];
var trainingPoint = ee.FeatureCollection('ft:1Ox0UWr9HtSkKUt3jPQKzJe9xpdsVBWnFQIBN5FGy');
//Map.addLayer(trainingPoint,{palette["0000ff","00ff00",'ff0000'], min:[1],max:[3]});
//print (trainingPoint);

//throw('stop')

//var focal2 = image.focal_mode(35,'circle','meters',2);

//Map.addLayer(image, {palette:['00ff00','ff0000'], min:[1], max:[2], opacity:0.3, scale: 30});

//Map.addLayer(image3, {palette:['00ff00','ff0000'], min:1, max:3, opacity:0.3}, 'Study Area');//,visPrams2;

///////////////////////////////////////////////////////////////////

//Some visualization parameters for stretching Landsat-like images
var vizParamsCO1 = {'min': 0.05,'max': [0.3,0.6,0.35],   'bands':'swir1,nir,red'};
var vizParamsCO2 = {'min': 0.15,'max': [0.35,0.8,0.4],   'bands':'swir1,nir,red', 'gamma': 1.6};
var vizParamsCO3 = {'min': 0.05,'max': [0.3,0.4,0.4],   'bands':'swir1,nir,red', 'gamma':1.6};
var vizParamsFalse = {'min': 0.1,'max': [0.3,0.3,0.3],   'bands':'nir,swir1,red'};
var vizParamsViz = {'min': 0.05, 'max': 0.3,'bands': 'red,green,blue', 'gamma': 1.6};
var vizParams = vizParamsCO1;
/////////////////////////////////////////////////////////////////////////
//Common band names
var bandNames = ee.List(['blue','green','red','nir','swir1','temp','swir2']);
var bandNumbers = [0,1,2,3,4,5,6];
//////////////////////////////////////////////////////////////
//Band combinations for each sensor corresponding to final selected corresponding bands                        
  var sensor_band_dict =ee.Dictionary({L8 : ee.List([1,2,3,4,5,9,6]),
                        L7 : ee.List([0,1,2,3,4,5,7])
  });
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//Helper function to not have to use EE list object
//Works al la range in Python 
function range(start, stop, step){
  // start = parseInt(start);
  // stop = parseInt(stop);
    if (typeof stop=='undefined'){
        // one param defined
        stop = start;
        start = 0;
    }
    if (typeof step=='undefined'){
        step = 1;
    }
    if ((step>0 && start>=stop) || (step<0 && start<=stop)){
        return [];
    }
    var result = [];
    for (var i=start; step>0 ? i<stop : i>stop; i+=step){
        result.push(i);
    }
    return result;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Function to rescale image between 0 and 1
function rescale(img, exp, thresholds) {
    return img.expression(exp, {img: img})
        .subtract(thresholds[0]).divide(thresholds[1] - thresholds[0]);
  }
/////////////////////////////////////////////////////////////
//Function to compute the "snowiness" of a pixel
//Uses most logic from the Google cloud score algorithm
//Calibrated in AK so may need calibration if used elsewhere
function snowScore(img){
      // Compute several indicators of snowyness and take the minimum of them.
      var score = ee.Image(1.0);
      // Snow is reasonably bright in the blue band.
      score = score.min(rescale(img, 'img.blue', [0.1, 0.3]));
    
      // Snow is reasonably bright in all visible bands.
      score = score.min(rescale(img, 'img.red + img.green + img.blue', [0.2, 0.8]));
    
      // // Excluded this for snow reasonably bright in all infrared bands.
      // score = score.min(
      //     rescale(img, 'img.nir + img.swir1 + img.swir2', [0.3, 0.8]));
    
      // Snow is reasonably cool in temperature.
      //Changed from [300,290] to [290,275] for AK
      score = score.min(rescale(img, 'img.temp', [300, 285]));
      
       // Snow is high in ndsi.
      var ndsi = img.normalizedDifference(['green', 'swir1']);
      ndsi = rescale(ndsi, 'img', [0.5, 0.7]);
      score = score.min(ndsi);
      
      return score.clamp(0,1)
      
      }
////////////////////////////////////////////////////// 
//Algorithm to compute liklihood of water
//Builds on logic from Google cloudScore algorithm
function waterScore(img){
      // Compute several indicators of water and take the minimum of them.
      var score = ee.Image(1.0);
      
      //Set up some params
      var darkBands = ['green','red','nir','swir2','swir1'];//,'nir','swir1','swir2'];
      var brightBand = 'blue';
      var shadowSumBands = ['nir','swir1','swir2'];
      //Water tends to be dark
      var sum = img.select(shadowSumBands).reduce(ee.Reducer.sum());
       sum = rescale(sum,'img',[0.35,0.2]).clamp(0,1)
      score = score.min(sum)
      
      //It also tends to be relatively bright in the blue band
      var mean = img.select(darkBands).reduce(ee.Reducer.mean());
      var std = img.select(darkBands).reduce(ee.Reducer.stdDev());
      var z = (img.select([brightBand]).subtract(std)).divide(mean)
      z = rescale(z,'img',[0,1]).clamp(0,1)
      score = score.min(z)
     
      // // Water is at or above freezing
      score = score.min(rescale(img, 'img.temp', [273, 275]));
      
      // // Water is nigh in ndsi (aka mndwi)
      var ndsi = img.normalizedDifference(['green', 'swir1']);
      ndsi = rescale(ndsi, 'img', [0.3, 0.8]);
      
      score = score.min(ndsi);
      
      return score.clamp(0,1)
      
      }
//////////////////////////////////////////////////////////////////////////
//Helper functions for masking snow and water
//Thresholds between 0-1 where lower number masks more out
//////////////////////////////////////////////////////////////////
function maskSnow(img){
  var ss = snowScore(img)
  return img.mask(img.mask().and(ss.lt(snowThresh)))
}
//////////////////////////////////////////////////////////////////
function maskWater(img){
  var ws = waterScore(img)
  return img.mask(img.mask().and(ws.lt(waterThresh)))
}
/////////////////////////////////////////////////////////////////
//Basic cloud busting function
function bustClouds(img){
    var t = img
    var cs = ee.Algorithms.Landsat.simpleCloudScore(img).select('cloud')
    var out = img.mask(img.mask().and(cs.lt(cloudThresh)))
    return out.copyProperties(t)
}
////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
//Function to handle empty collections that will cause subsequent processes to fail
//If the collection is empty, will fill it with an empty image
function fillEmptyCollections(inCollection,dummyImage){                       
  var dummyCollection = ee.ImageCollection([dummyImage.mask(ee.Image(0))])
  var imageCount = inCollection.toList(1).length()
  return ee.ImageCollection(ee.Algorithms.If(imageCount.gt(0),inCollection,dummyCollection))
}
//////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////
//Function for adding common indices
function addIndices(in_image){
    in_image = in_image.addBands(in_image.normalizedDifference(['nir', 'red']).select([0],['NDVI']));
    in_image = in_image.addBands(in_image.normalizedDifference(['green', 'swir1']).select([0],['NDWI']));
    //EVI algorithm taken from: http://landsat.usgs.gov/documents/si_product_guide.pdf
    //EVI = (Band 4 – Band 3) / (Band 4 + 6 * Band 3 – 7.5 * Band 1 + 1)
    // var nir = in_image.select(['nir']).multiply(10000);
    // var red = in_image.select(['red']).multiply(10000);
    // var evi = (nir.subtract(red)).divide((nir))
    return in_image;
}

/////////////////////////////////////////////////////////////////////////////////
//Adds the float year with julian proportion to image
function addDateBand(img){

  var d = ee.Date(img.get('system:time_start'))
  var y = d.get('year')
  d = y.add(d.getFraction('year'))
  var db = ee.Image.constant(d).select([0],['year']).float()
  return img.addBands(db)
  .copyProperties(img)
}
///////////////////////////////////////////////////
//Defringe algorithm credits:
// #
// # Bonnie Ruefenacht, PhD
// #
// # Purpose: Remove the fringes of landsat 5 and 7 scenes.
// #
//Kernel for masking fringes found and L5 and L7 imagery


//////////////////////////////////////////////////////
//Function to remove cloud shadows
//Works by identifying dark outliers in the infrared bands
function simpleTDOM(collection,zShadowThresh,zCloudThresh,maskAllDarkPixels){
  //Set up some variables
      var shadowSumBands = ['nir','swir1','swir2']
      var sSName = 'shadowSum'
      var startBandNames = ee.Image(collection.first()).bandNames();
      
      //Add the sum of the infrared to all images
      collection = collection.map(function(img){
        var shadowSum = img.select(shadowSumBands).reduce(ee.Reducer.sum()).select([0],[sSName])
        return img.addBands(shadowSum);
      })
      
      //If a first cut of masking very dark pixels is chosen, then mask all very dark pixels
      //This works kind of like the two-step approach in Fmask with individual image-based
      //masking and then a time series-based method
      if(maskAllDarkPixels === true){
        collection = collection.map(function(img){
          return img.mask(img.mask().and(img.select([sSName]).gt(shadowThresh)))
        })
      }
      
      //Compute the stdDev and mean of the sum of the infrared bands fo z-score analysis
      var shadowStd = collection.select(sSName).reduce(ee.Reducer.stdDev());
      var shadowMean = collection.select(sSName).mean();
      
      //Compute z-score and mask pixels falling below a specified threshold
      collection = collection.map(function(img){
        var tShadowSum = img.select(shadowSumBands).reduce(ee.Reducer.sum()).select([0],['shadowSumT']);
        var zScore = tShadowSum.subtract(shadowMean).divide(shadowStd).select([0],['zShadow']);
        var m = zScore.gt(zShadowThresh).and(zScore.lt(zCloudThresh));
        return img.mask(img.mask().and(m)).select(startBandNames);
      })
      return collection
    } 
//////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//Function for gathering, cloud masking, and cloud shadow masking Landsat imagery
function simpleCloudShadowFreeImages(startDate,endDate,startJulian,endJulian){
  
  //Get L7 images      
  var l7 = ee.ImageCollection('LE7_L1T_TOA')
        .filterDate(startDate,endDate)
        .filter(ee.Filter.calendarRange(startJulian,endJulian))
        .filterBounds(studyArea)
        //May or may not want to run defringe on L7
        // if(runDefringe === true){
        //   print('Running defringe on L7')
        //   l7 = l7.map(defringeLandsat);
        // }
        //Bust clouds
        l7 = l7
        .map(bustClouds)
        .select(sensor_band_dict.get('L7'),bandNames)
  
  //Get L8 images and bust clouds
  var l8 = ee.ImageCollection('LC8_L1T_TOA')
        .filterDate(startDate,endDate)
        .filter(ee.Filter.calendarRange(startJulian,endJulian))
        .filterBounds(studyArea)
        .map(bustClouds)
        .select(sensor_band_dict.get('L8'),bandNames)
  
  //Merge collections 
  var ls = ee.ImageCollection(l7.merge(l8));
  
  //Mask snow and/or water of elected
  if(shouldMaskSnow === true){
    print('Masking snow');
    ls = ls.map(maskSnow);
  }
  if(shouldMaskWater === true){
    print('Masking water');
    ls = ls.map(maskWater);
  }
  
  //Temporal Dark Outlier Mask (TDOM)
  //Z-score based cloud shadow removal
  if(runTDOM === true){
    ls =simpleTDOM(ls,zShadowThresh,zCloudThresh,maskAllDarkPixels)
  }
  ls = ls.map(addIndices);
  return ls
}
function exportLandsatComposite(composite,name,res,crs,noData){
  // var composite =simpleCloudShadowFreeImages(startDate,endDate,startJulian,endJulian).median();
  addToMap(composite,vizParams,name)
  print(composite.bandNames());
  //var forExport = composite.select([0,1,2,3,4,6]).multiply(10000);//Multiply refl bands by 10k to reduce to 16 bit
  //forExport = forExport.addBands(composite.select([5])).select([0,1,2,3,4,6,5]).int16();//Add thermal back in and cast to 16 bit
  //output NDVI only
  var forExport = composite.select([0,1,2,3,4,5,6,7,8]).multiply(10000);//Multiply refl bands by 10k to reduce to 16 bit
  var m = forExport.mask();//Get current null values
  forExport = forExport.mask(ee.Image(1));//Get rid of all null values
  forExport = forExport.where(m.not(),noData);//Reset null values to no data value
  Export.image(forExport,name,{'crs':crs,'region':regionJSON,'scale':res,'maxPixels':1e13})
  
  var exportViz = forExport.float().divide(10000).clip(studyArea).visualize(vizParams);
  addToMap(exportViz,{},name+'-8-bit',false)
  //Get URL for PNG 
 //ar url =exportViz.getThumbURL({'dimensions':1500,'region':regionJSON,'format':'png'})
//print(url)
}
//////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////

//Parameters
var startDate = ee.Date.fromYMD(2014,6,1);
var endDate = ee.Date.fromYMD(2015,5,30);

var startJulian = 151;
var endJulian = 315;

var startJulian1 = 316;
var endJulian1 = 75;

var startJulian2 = 76;
var endJulian2 = 150;


var cloudThresh = 30;//Threshold for cloud masking (lower number masks more clouds)

var runTDOM = true;//Whether to run TDOM cloud shadow masking
var runDefringe = true;//Whether to run defringe algorithm on L5 and L7
var fringeCountThreshold = 279;//Define number of non null observations for pixel to not be classified as a fringe
var runTDOM = true;//Whether to run TDOM
var maskAllDarkPixels = false;//Whether to perform a first cut masking of all dark pixels for shadow masking

var shadowThresh = 0.1;//If maskAllDarkPixels == true, a first cut of cloud shadow masking.  Generally 0.1-0.15 works well
var zShadowThresh = -0.8;//Z-score threshold for cloud shadows. Generally -0.8 to -2.0 works well.  Masks more as it approaches 0
var zCloudThresh = 3;//Z-score threshold for masking any missed clouds.  Generally 3-4 works well

// var minNumberObservationsNeeded = 5;//Min number of observations needed for pixel to be included in analysis
var shouldMaskSnow = false;//Whether to mask snow
var shouldMaskWater = false;//Whether to mask water
var waterThresh = 0.05;//Lower number masks more out  (0-1)
var snowThresh = 0.05;//Lower number masks more out (0-1)

var crs = 'EPSG:4326'; //Projection info for export
var outNoData = -99; //Null value on export
var outputName = 'SA_NDVI_151_315_14';//Descriptive name for export
var outputName1 = 'SA_NDVI_316_75_1415';
var outputName2 = 'SA_NDVI_76_150_15';


//Get all images and cloud and shadow mask them
var allImages = simpleCloudShadowFreeImages(startDate,endDate,startJulian,endJulian);
var allImages1 = simpleCloudShadowFreeImages(startDate,endDate,startJulian1,endJulian1);
var allImages2 = simpleCloudShadowFreeImages(startDate,endDate,startJulian2,endJulian2);

//Export the composite
//exportLandsatComposite(allImages.median(),outputName,30,crs,outNoData)

var ndviImage = ee.Image(allImages.mean(),outputName,30,crs,outNoData);
var ndviImage1 = ee.Image(allImages1.mean(),outputName,30,crs,outNoData);
var ndviImage2 = ee.Image(allImages2.mean(),outputName2,30,crs,outNoData);


//var vizParamsCO1 = {'min': 0.003,'max': [0.1,0.1,0.1],   'bands':'red_stdDev,green_stdDev,blue_stdDev', opacity:1};
var vizParamsCO1 = {'min': 0.05,'max': [0.4,0.4,0.35],   'bands':'red,green,blue'};
//Map.addLayer(ndviImage2, vizParamsCO1, 'stdev5');

 

var input = ee.Image.cat([ndviImage, ndviImage1, ndviImage2]);

//put = inputOrig.mask(image2.gt(1.5));


//var train = [thiCrop,thiNotcrop];
var TrainingSamples = ee.FeatureCollection(trainingPoint);

var training = input.sampleRegions({
    collection: TrainingSamples,
  properties: ['newCode'],
  scale: 30
});
Export.table(training, 'SA_GD_Training');

//print('training:',training);

//build classifier
var classifier = ee.Classifier.randomForest(200,0,1,0.5,true).train(training, 'newCode');
// print (classifier);

//classify the whole landscape
var classified = input.classify(classifier);

////Export the classified image
var jsonCoordString = studyArea.toGeoJSON();
Export.image(classified, 'SA_RF_2014_2367', {
 scale: 30, 
 region: jsonCoordString, 
 maxPixels:9999900000000
 });
 
